name: Build and Push Docker Image to ECR
on:
  push:
    branches:
      - main
      
jobs:
  # docker-build-and-push:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install AWS CLI and Docker
  #       uses: ./.github/composite-actions/install-tools
  #       with:
  #         aws_version: 'latest'  
  #         docker_version: 'latest'  
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ap-south-1
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     - name: Verify AWS CLI configuration
  #       run: aws sts get-caller-identity
      
  #     - name: Docker Build Push
  #       run: |
  #         ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
  #         docker build -t ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:${GITHUB_SHA::7} . -f Dockerfile.prod
  #         docker push ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:${GITHUB_SHA::7}
  #         echo "pushed docker image : ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:${GITHUB_SHA::7}"
  #         echo "Preparing for rollback"
  #         docker pull ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:latest
  #         docker tag ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:latest ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:rollback-${GITHUB_SHA::7}
  #         docker push ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:rollback-${GITHUB_SHA::7}

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: docker-build-and-push
  #   environment: prod
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install AWS CLI and Docker
  #       uses: ./.github/composite-actions/install-tools
  #       with:
  #         aws_version: 'latest'  
  #         docker_version: 'latest'  
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ap-south-1
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     - name: Docker Tag
  #       run: |
  #         ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
  #         docker pull ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:${GITHUB_SHA::7}
  #         docker tag ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:${GITHUB_SHA::7} ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:devops
  #         docker push ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:devops
  #     - name: Restart ECS service
  #       run: |
  #         aws ecs update-service \
  #           --cluster prod-zalon-cluster \
  #           --service prod-zalon-review-service \
  #           --force-new-deployment
  # rollback:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   environment: rollback
  #   continue-on-error: true
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install AWS CLI and Docker
  #       uses: ./.github/composite-actions/install-tools
  #       with:
  #         aws_version: 'latest'  
  #         docker_version: 'latest'  
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ap-south-1
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     - name: Docker Tag
  #       run: |
  #         ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
  #         docker pull ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:rollback-${GITHUB_SHA::7}
  #         docker tag ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:rollback-${GITHUB_SHA::7} ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:devops
  #         docker push ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository:devops
  #     - name: Restart ECS service
  #       run: |
  #         aws ecs update-service \
  #           --cluster prod-zalon-cluster \
  #           --service prod-zalon-review-service \
  #           --force-new-deployment
  cleanup:
    runs-on: ubuntu-latest
    # needs: [deploy, rollback]
    # if: ${{ needs.deploy.result == 'failure' || needs.deploy.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install AWS CLI and Docker
        uses: ./.github/composite-actions/install-tools
        with:
          aws_version: 'latest'  
          docker_version: 'latest'  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Remove unwanted tags
        run: |
          # aws ecr batch-delete-image --repository-name ${ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/prod-zalon-review-service-repository \
          #   --image-ids imageTag="rollback-${GITHUB_SHA::7}" imageTag="${GITHUB_SHA::7}"
          aws ecr batch-delete-image --repository-name prod-zalon-review-service-repository \
            --image-ids imageTag="rollback-83cee994507d0134dfbf219840288fac72aff40f" imageTag="rollback-910317c" imageTag="rollback-7c7d525" imageTag="rollback-bf2819e" imageTag="rollback-015ac43" 

      
      